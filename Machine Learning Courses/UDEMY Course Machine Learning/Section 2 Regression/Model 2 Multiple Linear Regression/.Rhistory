R.version
R.version
install.packages(tidyverse)
install.packages('tidyverse')
install.packages("installr")
library(installr)
updateR()
library('installr')
R.version
testing_set[,2:3]= scale(testing_set[,2:3])
# Import dataset.
dataset = read.csv('Data.csv')
# Replace NA values with the mean value of the column.
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Categorical Variables.
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c(unique(dataset$Purchased)),
labels = c(sequence(length(unique(dataset$Purchased)))))
# Split training and test datasets.
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Scaling Values.
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3]= scale(testing_set[,2:3])
# Import dataset.
dataset = read.csv('Data.csv')
# Import dataset.
dataset = read.csv('Data.csv')
setwd("G:/05_Data-Science-Codes/General Machine Learning/Machine Learning Courses/UDEMY Course Machine Learning/Section 1 Data Preprocessing")
# Import dataset.
dataset = read.csv('Data.csv')
# Replace NA values with the mean value of the column.
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Categorical Variables.
dataset$Country = factor(dataset$Country,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c(unique(dataset$Purchased)),
labels = c(sequence(length(unique(dataset$Purchased)))))
# Split training and test datasets.
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Scaling Values.
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3]= scale(testing_set[,2:3])
View(testing_set)
View(testing_set)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
setwd("G:/05_Data-Science-Codes/General Machine Learning/Machine Learning Courses/UDEMY Course Machine Learning/Section 2 Regression/Model 1 Simple Linear Regression")
# Import the dataset.
dataset = read.csv("Salary_Data.csv")
# Import the dataset.
dataset = read.csv("Salary_Data.csv")
View(dataset)
View(dataset)
# Import the dataset.
dataset = read.csv("Salary_Data.csv")
# Split the datset.
library(caTools)
set.seed(123)
split =  sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(training_set)
View(training_set)
? lm
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
View(regressor)
View(regressor)
summary(regressor)
?predict()
# Prediction with test dataset.
y_pred = predict(regressor, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
install.packages("tidyverse")
# Graphs for Prediction.
library(ggplot2)
# Graphs for Prediction.
library(ggplot2)
ggplot2::
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot2() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot2
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot2 ::
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
ggplot2 :: geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary))
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = testing_set)), colour = 'blue') +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = y_pred ), colour = 'blue') +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
# Import the dataset.
dataset = read.csv("Salary_Data.csv")
# Split the datset.
library(caTools)
set.seed(123)
split =  sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
# Prediction with test dataset.
y_pred = predict(regressor, newdata = testing_set)
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = y_pred), color = "red")
# Graphs for Prediction.
library(ggplot2)
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), color = "blue")
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), color = "blue")
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), color = "blue")
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary"
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), color = "blue") +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
# Graphs for Prediction.
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary), colour = "red") +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)), color = "blue") +
ggtitle("Salary  - Years of Experience") +
xlab(" Years of Experience") +
ylab("Salary")
setwd("G:/05_Data-Science-Codes/General Machine Learning/Machine Learning Courses/UDEMY Course Machine Learning/Section 2 Regression/Model 2 Multiple Linear Regression")
system("python GCP_Multiple_Linear_Regressor_Model_Explanation.py")
system("python GCP_Multiple_Linear_Regressor_Model_Explanation.py")
system("python GCP_Multiple_Linear_Regressor_Model_Explanation.py")
datasets = read.csv("50_Startups.csv")
c(unique(datasets$State))
vector(unique(datasets$State))
c(sequence(length(unique(datasets$State))))
# Import dataset.
datasets = read.csv("50_Startups.csv")
# Coding the cathegorical variables.
datasets$State = factor(datasets$State,
levels = c(unique(datasets$State)),
labels = c(sequence(length(unique(datasets$State)))))
# Split the dataset.
library(caTools)
View(datasets)
View(datasets)
View(datasets)
View(datasets)
View(datasets)
# Import dataset.
datasets = read.csv("50_Startups.csv")
# Coding the cathegorical variables.
datasets$State = factor(datasets$State,
levels = c(unique(datasets$State)),
labels = c(sequence(length(unique(datasets$State)))))
# Split the dataset.
library(caTools)
set.seed(123)
split = sample.split(datasets$Profit, SplitRatio = 0.8)
training_set = subset(datasets, split == TRUE)
testing_set = subset(datasets, split == FALSE)
typeof(datasets)
type(datasets)
View(training_set)
View(training_set)
# Fitting the model.
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketting.Spend + State,
data = training_set)
# Fitting the model.
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
typeof(regression)
View(regression)
View(regression)
summary(regression)
View(training_set)
View(training_set)
# Predicting Results.
y_pred = predict(regression, newdata = testing_set)
# Building a backward elimination model.
regression = lm(formula = Profit ~ .,
data = datasets)
summary(regression)
# Import dataset.
datasets = read.csv("50_Startups.csv")
# Coding the cathegorical variables.
datasets$State = factor(datasets$State,
levels = c(unique(datasets$State)),
labels = c(sequence(length(unique(datasets$State)))))
# Split the dataset.
library(caTools)
set.seed(123)
split = sample.split(datasets$Profit, SplitRatio = 0.8)
training_set = subset(datasets, split == TRUE)
testing_set = subset(datasets, split == FALSE)
# Fitting the model.
regression = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
# Predicting Results.
y_pred = predict(regression, newdata = testing_set)
# Building a backward elimination model.
BackwardElimination <- function(x, s1){
numVars = length(x)
for(i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x )
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > s1){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars -1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
BackwardElimination(training_set, SL)
